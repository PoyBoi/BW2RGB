import cv2
import numpy as np

# Read the image and resize it by half
# img = cv2.imread(r"C:\Users\parvs\Downloads\scratch_removal_automatic_1.jpg")
def detScr(loc:str, gSize:int) -> np.ndarray:
    img = cv2.imread(loc)
    im1 = cv2.resize(img, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_AREA)
    # im1 = img

    # Convert to grayscale
    gray = cv2.cvtColor(im1, cv2.COLOR_BGR2GRAY)

    # Define Gaussian filter parameters
    # gSize = 1 # Replace with your desired Gaussian filter size (e.g., 5, 7, etc.)

    # ====== OG CODE ==================================================================================
    sigma = gSize / 2  # Standard deviation for the Gaussian filter

    # Apply Gaussian filter with replication at borders
    gray = cv2.filter2D(gray, -1, cv2.getGaussianKernel(gSize, sigma), borderType=cv2.BORDER_REPLICATE)
    # =================================================================================================

    # ====== ALT CODE =================================================================================
    # Define your custom Gaussian filter
#     gaussian_filter = np.array([
#         [0.00253790859361804, 0.00284879446220838, 0.00314141610419987, 0.00340305543986557, 0.00362152753952273, 0.00378611472031542, 0.00388843599983945, 0.00392315394879368, 0.00388843599983945, 0.00378611472031542, 0.00362152753952273, 0.00340305543986557, 0.00314141610419987, 0.00284879446220838, 0.00253790859361804], 
#         [0.00284879446220838, 0.00319776287779517, 0.00352622975612324, 0.00381991909245893, 0.00406515334132644, 0.00424990193722614, 0.00436475725361032, 0.00440372804277458, 0.00436475725361032, 0.00424990193722614, 0.00406515334132644, 0.00381991909245893, 0.00352622975612324, 0.00319776287779517, 0.00284879446220838], 
#         [0.00314141610419987, 0.00352622975612324, 0.00388843599983945, 0.00421229243210782, 0.00448271658130972, 0.00468644212981339, 0.00481309512122034, 0.00485606890058492, 0.00481309512122034, 0.00468644212981339, 0.00448271658130972, 0.00421229243210782, 0.00388843599983945, 0.00352622975612324, 0.00314141610419987], 
#         [0.00340305543986557, 0.00381991909245893, 0.00421229243210782, 0.0045631219169675, 0.00485606890058492, 0.00507676215263394, 0.00521396370030743, 0.0052605166397422, 0.00521396370030743, 0.00507676215263394, 0.00485606890058492, 0.0045631219169675, 0.00421229243210782, 0.00381991909245893, 0.00340305543986557], 
#         [0.00362152753952273, 0.00406515334132644, 0.00448271658130972, 0.00485606890058492, 0.00516782273108746, 0.00540268422664802, 0.00554869395001131, 0.00559823553262373, 0.00554869395001131, 0.00540268422664802, 0.00516782273108746, 0.00485606890058492, 0.00448271658130972, 0.00406515334132644, 0.00362152753952273],
#         [0.00378611472031542, 0.00424990193722614, 0.00468644212981339, 0.00507676215263394, 0.00540268422664802, 0.00564821944786971, 0.00580086485975791, 0.00585265795345929, 0.00580086485975791, 0.00564821944786971, 0.00540268422664802, 0.00507676215263394, 0.00468644212981339, 0.00424990193722614, 0.00378611472031542], 
#         [0.00388843599983945, 0.00436475725361032, 0.00481309512122034, 0.00521396370030743, 0.00554869395001131, 0.00580086485975791, 0.00595763557555571, 0.00601082839853353, 0.00595763557555571, 0.00580086485975791, 0.00554869395001131, 0.00521396370030743, 0.00481309512122034, 0.00436475725361032, 0.00388843599983945], 
#         [0.00392315394879368, 0.00440372804277458, 0.00485606890058492, 0.0052605166397422, 0.00559823553262373, 0.00585265795345929, 0.00601082839853353, 0.00606449615428972, 0.00601082839853353, 0.00585265795345929, 0.00559823553262373, 0.0052605166397422, 0.00485606890058492, 0.00440372804277458, 0.00392315394879368], 
#         [0.00388843599983945, 0.00436475725361032, 0.00481309512122034, 0.00521396370030743, 0.00554869395001131, 0.00580086485975791, 0.00595763557555571, 0.00601082839853353, 0.00595763557555571, 0.00580086485975791, 0.00554869395001131, 0.00521396370030743, 0.00481309512122034, 0.00436475725361032, 0.00388843599983945], 
#         [0.00378611472031542, 0.00424990193722614, 0.00468644212981339, 0.00507676215263394, 0.00540268422664802, 0.00564821944786971, 0.00580086485975791, 0.00585265795345929, 0.00580086485975791, 0.00564821944786971, 0.00540268422664802, 0.00507676215263394, 0.00468644212981339, 0.00424990193722614, 0.00378611472031542], 
#         [0.00362152753952273, 0.00406515334132644, 0.00448271658130972, 0.00485606890058492, 0.00516782273108746, 0.00540268422664802, 0.00554869395001131, 0.00559823553262373, 0.00554869395001131, 0.00540268422664802, 0.00516782273108746, 0.00485606890058492, 0.00448271658130972, 0.00406515334132644, 0.00362152753952273], 
#         [0.00340305543986557, 0.00381991909245893, 0.00421229243210782, 0.0045631219169675, 0.00485606890058492, 0.00507676215263394, 0.00521396370030743, 0.0052605166397422, 0.00521396370030743, 0.00507676215263394, 0.00485606890058492, 0.0045631219169675, 0.00421229243210782, 0.00381991909245893, 0.00340305543986557], 
#         [0.00314141610419987, 0.00352622975612324, 0.00388843599983945, 0.00421229243210782, 0.00448271658130972, 0.00468644212981339, 0.00481309512122034, 0.00485606890058492, 0.00481309512122034, 0.00468644212981339, 0.00448271658130972, 0.00421229243210782, 0.00388843599983945, 0.00352622975612324, 0.00314141610419987], 
#         [0.00284879446220838, 0.00319776287779517, 0.00352622975612324, 0.00381991909245893, 0.00406515334132644, 0.00424990193722614, 0.00436475725361032, 0.00440372804277458, 0.00436475725361032, 0.00424990193722614, 0.00406515334132644, 0.00381991909245893, 0.00352622975612324, 0.00319776287779517, 0.00284879446220838], 
#         [0.00253790859361804, 0.00284879446220838, 0.00314141610419987, 0.00340305543986557, 0.00362152753952273, 0.00378611472031542, 0.00388843599983945, 0.00392315394879368, 0.00388843599983945, 0.00378611472031542, 0.00362152753952273, 0.00340305543986557, 0.00314141610419987, 0.00284879446220838, 0.00253790859361804]
# ])

#     # Apply the custom Gaussian filter
#     gray = cv2.filter2D(gray, -1, gaussian_filter, borderType=cv2.BORDER_REPLICATE)
    # =================================================================================================

    # Calculate image gradients using Sobel operator
    # (Equivalent to ImageFeatures.Gradients in MATLAB)
    gx = cv2.Sobel(gray, cv2.CV_64F, 1, 0)  # Gradient in x-direction
    gy = cv2.Sobel(gray, cv2.CV_64F, 0, 1)  # Gradient in y-direction
    mg = cv2.magnitude(gx, gy)  # Magnitude of the gradient

    # Threshold the magnitude
    threshold = 0.3 * np.max(mg)  # Threshold value based on maximum magnitude
    mgBw = ((mg > threshold) * 255).astype(np.uint8)

    # Morphological operations
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))  # Disk structuring element

    # Close small holes
    mgBw = cv2.morphologyEx(mgBw, cv2.MORPH_CLOSE, kernel)

    # Remove small objects
    mgBw = cv2.morphologyEx(mgBw, cv2.MORPH_OPEN, kernel, iterations=1)  # Erosion followed by dilation

    # Close larger holes (optional)
    mgBw = cv2.morphologyEx(mgBw, cv2.MORPH_CLOSE, kernel, iterations=2)  # Uncomment if needed

    # Fill internal holes
    # mgBw = cv2.fillConvexPoly(mgBw, np.ones((mgBw.shape[0], mgBw.shape[1]), dtype=np.uint8), 255)
    # Fill internal holes
    _, mgBw, _, _ = cv2.floodFill(mgBw.astype(np.uint8), None, (0,0), 255)

    # Display the processed image (optional)
    cv2.imshow('Processed Image', mgBw)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    return mgBw

#__main__
# detScr(r"C:\Users\parvs\Downloads\scratch_removal_automatic_1.jpg", 1)